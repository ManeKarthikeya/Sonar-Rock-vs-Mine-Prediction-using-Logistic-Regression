# -*- coding: utf-8 -*-
"""Sonar Rock vs Mine Prediction with Python.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Hqbs3sOmyarI9ZlYR9v1gY1XF_E75jRI

Importing the Dependencies
"""

import numpy as np
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score

"""Data Collection and Data Processing"""

# loding the data set to a pandas Dataframe
sonar_data = pd.read_csv('path of csv', header=None)

sonar_data.head()

# number of rows and columns
sonar_data.shape

# describe ---> statistical measure of the data
sonar_data.describe()

sonar_data[60].value_counts()

"""M ---> Mine

R ---> Rock
"""

sonar_data.groupby(60).mean()

# separating data and Labels
x = sonar_data.drop(columns=60, axis=1)
y = sonar_data[60]

print(x)
print(y)

"""Trining and Test Data"""

X_train, X_test, Y_train, Y_test = train_test_split(x, y, test_size=0.1, stratify=y, random_state=1)

print(x.shape, X_train.shape, X_test.shape)

print(X_train)
print(Y_train)

"""Model Training ---> Logistic Regression"""

model = LogisticRegression()

# training the logistic Regression model with training data
model.fit(X_train, Y_train)

"""Model Evaluation"""

# accuracy on training data
X_train_prediction = model.predict(X_train)
training_data_accuracy = accuracy_score(X_train_prediction, Y_train)

print('Accuracy on training data : ', training_data_accuracy * 100,'%')

# accuracy on test data
X_test_prediction = model.predict(X_test)
test_data_accuracy = accuracy_score(X_test_prediction, Y_test)

print('Accuracy on test data : ', test_data_accuracy * 100,'%')

"""Making a Predictive System"""

input_data = (Give an input hear)

# changing the input_data to a numpy array
input_data_as_numpy_array = np.asarray(input_data)

# reshape the np array as we are predicting for one instance
input_data_reshaped = input_data_as_numpy_array.reshape(1,-1)

prediction = model.predict(input_data_reshaped)
print(prediction)

if (prediction[0]=='R'):
  print('The object is a Rock')
else:
  print('The object is a mine')